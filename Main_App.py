import tkinter as tk
from tkinter import ttk
from tkinter.ttk import Progressbar
from Prediction import predict_c
from Train_mod import train_c
import sys,os
from tkinter import * 
import threading
from PIL import Image, ImageTk


LARGEFONT =("Arial Bold", 20)
smallFONT =("Arial Bold", 10)
  
class tkinterApp(tk.Tk):
     
    # __init__ function for class tkinterApp
    def __init__(self, *args, **kwargs):
         
        # __init__ function for class Tk
        tk.Tk.__init__(self, *args, **kwargs)
        
        # creating a container
        container = tk.Frame(self)
        container.pack(side = "top", fill = "both", expand = True)
        self.geometry('550x300')
        self.iconbitmap('C:\\Users\\prasad14348\\Downloads\\FinalYear-main\\md.ico')
        self.title("Malware Detection")
        container.grid_rowconfigure(0, weight = 1)
        container.grid_columnconfigure(0, weight = 1)
  
        # initializing frames to an empty array
        self.frames = {} 
        self.predict_c_o = predict_c()
        self.train_c_o = train_c()
        # iterating through a tuple consisting
        # of the different page layouts
        for F in (StartPage, Prediction_F, Train_Model_F,Loading_C,Complete_C):
  
            frame = F(container, self)
  
            # initializing frame of that object from
            # startpage, Prediction_F, Train_Model_F respectively with
            # for loop
            self.frames[F] = frame
  
            frame.grid(row = 0, column = 0, sticky ="nsew")
  
        self.show_frame(StartPage)
        
  
    # to display the current frame passed as
    # parameter
    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()

    def pp_bt(self,cont):
        frame = self.frames[cont]
        frame.button3.destroy()
        novi = Toplevel()
        canvas = Canvas(novi, width = 655, height = 500)
        canvas.pack(expand = YES, fill = BOTH)
        gif1 = PhotoImage(file = 'foo.png')
        canvas.create_image(10, 10, image = gif1, anchor = NW)
        canvas.gif1 = gif1   

    def pre_show(self, cont,txt1,job_type):
        file_path = txt1.get()
        self.show_frame_file_path(cont,file_path,job_type)

    def show_frame_file_path(self, cont,file_path,job_type):
        frame = self.frames[cont]
        frame.tkraise()
        frame.get_file_path(file_path,self,job_type)
        


    def clicked(self,file_path,job_type):

        if job_type == "Prediction":
            self.predict_c_o.pre_f(file_path)
            self.show_frame_file_path(Complete_C,file_path,job_type)

    def clicked1(self,file_path,job_type):

        if job_type == "Train Model":
            self.train_c_o.train_f(file_path)
            
            self.show_frame_file_path(Complete_C,file_path,job_type)     


        

  
# first window frame startpage
  
class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
         
        # label of frame Layout 2
        label = tk.Label(self, text ="Please choose option :", font = LARGEFONT)
         
        # putting the grid in its place by using
        # grid

        label.place(relx = 0.5,
                   rely = 0.3,
                   anchor = 'center')
  
        button1 = tk.Button(self, text ="Prediction",height=3,width=15,bg="#C2DFFF",
        command = lambda : controller.show_frame(Prediction_F))
     
        # putting the button in its place by
        # using grid
        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
        button1.place(relx = 0.3,
                   rely = 0.6,
                   anchor = 'center')
  
        ## button to show frame 2 with text layout2
        button2 = tk.Button(self, text ="Train Model",height=3,width=15,bg="#C2DFFF",
        command = lambda : controller.show_frame(Train_Model_F))
     
        # putting the button in its place by
        # using grid
        button2.grid(row = 2, column = 1, padx = 10, pady = 10)
        button2.place(relx = 0.7,
                   rely = 0.6,
                   anchor = 'center')
  
          
  
  
# second window frame Prediction_F
class Prediction_F(tk.Frame):
     
    def __init__(self, parent, controller):
         
        tk.Frame.__init__(self, parent)
        label = ttk.Label(self, text ="Prediction", font = LARGEFONT)
        label.grid(row = 0, column = 4, padx = 10, pady = 10)
        label.place(relx = 0.5,
                   rely = 0.1,
                   anchor = 'center')
        label1 = ttk.Label(self, text ="File path :", font = smallFONT)
        label1.grid(row = 0, column = 4, padx = 10, pady = 10)
        label1.place(relx = 0.1,
                   rely = 0.3,
                   anchor = 'center')
        txt1 = ttk.Entry(self,width=60)
        txt1.grid(column=1, row=1)
        txt1.place(relx = 0.2,
                   rely = 0.3,
                   anchor = 'w')
        
        button1 = tk.Button(self, text ="Start Prediction",height=3,width=15,bg="#C2DFFF",
        command = lambda : controller.pre_show(Loading_C,txt1,"Prediction"))
     
        # putting the button in its place by
        # using grid
        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
        button1.place(relx = 0.5,
                   rely = 0.6,
                   anchor = 'center')

    

  
        
  
  
  
  
# third window frame Train_Model_F
class Train_Model_F(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = ttk.Label(self, text ="Train Model", font = LARGEFONT)
        label.grid(row = 0, column = 4, padx = 10, pady = 10)
        label.place(relx = 0.5,
                   rely = 0.1,
                   anchor = 'center')
        label1 = ttk.Label(self, text ="File path :", font = smallFONT)
        label1.grid(row = 0, column = 4, padx = 10, pady = 10)
        label1.place(relx = 0.1,
                   rely = 0.3,
                   anchor = 'center')
        txt1 = ttk.Entry(self,width=60)
        txt1.grid(column=1, row=1)
        txt1.place(relx = 0.2,
                   rely = 0.3,
                   anchor = 'w')
        
        button1 = tk.Button(self, text ="Start Training",height=3,width=15,bg="#C2DFFF",
        command = lambda : controller.pre_show(Loading_C,txt1,"Train Model"))
     
        # putting the button in its place by
        # using grid
        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
        button1.place(relx = 0.5,
                   rely = 0.6,
                   anchor = 'center')
  
class Loading_C(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = ttk.Label(self, text ="Loading....", font = LARGEFONT)
        label.grid(row = 0, column = 4, padx = 10, pady = 10)
        label.place(relx = 0.5,
                   rely = 0.4,
                   anchor = 'center')
        label1 = ttk.Label(self, text ="It Will Take Some Time", font = smallFONT)
        label1.grid(row = 0, column = 4, padx = 10, pady = 10)
        label1.place(relx = 0.5,
                   rely = 0.6,
                   anchor = 'center')
        

    def get_file_path(self,file_path,controller,job_type):
       
        if job_type == "Prediction": 
            t1 = threading.Thread(target= lambda : controller.clicked(file_path,job_type))
            t1.start()
            
        elif job_type == "Train Model":
            t1 = threading.Thread(target= lambda : controller.clicked1(file_path,job_type))
            t1.start()
             
        
        


class Complete_C(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = ttk.Label(self, text ="Complete", font = LARGEFONT)
        label.grid(row = 0, column = 4, padx = 10, pady = 10)
        label.place(relx = 0.5,
                   rely = 0.2,
                   anchor = 'center')
        label2 = ttk.Label(self, text ="""Output file has been placed at""" , font = smallFONT)
        label2.grid(row = 0, column = 4, padx = 10, pady = 10)
        label2.place(relx = 0.5,
                   rely = 0.4,
                   anchor = 'center')
        

        button2 = tk.Button(self, text ="Home",height=3,width=15,bg="#C2DFFF",
                            command = lambda : controller.show_frame(StartPage))
     
        # putting the button in its place by
        # using grid
        button2.grid(row = 1, column = 1, padx = 10, pady = 10)
        button2.place(relx = 0.5,
                   rely = 0.7,
                   anchor = 'center')
                   
    def get_file_path(self,file_path,controller,job_type):
       
        if job_type == "Prediction": 
            label1 = ttk.Label(self, text ="""'C:\\Users\\prasad14348\\Downloads\\FinalYear-main\\Prediction_Result.csv'""" , font = smallFONT)
            label1.grid(row = 0, column = 4, padx = 10, pady = 10)
            label1.place(relx = 0.5,
                   rely = 0.5,
                   anchor = 'center')
            


        elif job_type == "Train Model":
            label1 = ttk.Label(self, text ="""'C:\\Users\\prasad14348\\Downloads\\FinalYear-main\\ANN_Model'""" , font = smallFONT)
            label1.grid(row = 0, column = 4, padx = 10, pady = 10)
            label1.place(relx = 0.5,
                   rely = 0.5,
                   anchor = 'center')
            self.button3 = tk.Button(self, text ="Show PPL",height=2,width=7,bg="#C2DFFF",
                            command = lambda : controller.pp_bt(Complete_C))
            self.button3.grid(row = 1, column = 1, padx = 10, pady = 10)
            self.button3.place(relx = 0.5,
                       rely = 0.9,
                       anchor = 'center')

            



# Driver Code

app = tkinterApp()
app.mainloop()




